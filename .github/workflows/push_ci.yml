name: Push CI Workflow
on:
  ## This tries to avoid unessesary pushes to forked repo
  ## development branches. No sense in a dev building every
  ## time they push for a PR and no one should be working on
  ## common branches in their fork.
  push:
    branches:
      - master
      - develop
      - 'hotfix/**'
      - 'release/**'
      - 'feature/**'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      ## We want the name to be 'develop' or 'release_v1.1.0'
      ## or in the case of a tag, 'v1.1.0'        
      - name: Set build_name
        id: build_name
        run: echo ::set-output name=build::$(sed -E 's/refs\/(heads|tags)\///; s/\//_/g;' <<< $GITHUB_REF)
      - name: Set branch_name
        id: branch_name
        run: echo ::set-output name=branch::$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
      - name: Set Commit Hash
        id: github_sha
        run: echo ::set-output name=sha::$(echo "${GITHUB_SHA}")
      ## This installs the correct node version
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
      ## This runs multiple commands to run.
      - name: npm ci, build, and test
        run: |
          npm ci
          CI="" npm run build
          npm test          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
      ## Echo build information to file
      - name: Create Build Information File
        working-directory: ./build
        run: |
          echo "Branch: ${{ steps.branch_name.outputs.branch }}" >> buildinfo.txt
          echo "Commit: ${{ steps.github_sha.outputs.sha }}" >> buildinfo.txt
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.build_name.outputs.build }}
          path: build
      - name: Upload artifact to netstorage
        shell: python
        env:
          ARTIFACT_FILENAME: ${{ join(steps.build_name.outputs.build,'.zip') }}
        run: |
          import os, sys

          ARTIFACT_FILENAME = os.environ.get('ARTIFACT_FILENAME')
          print(ARTIFACT_FILENAME)
          print(sys.version)
