name: Push CI Workflow
on:
  ## This tries to avoid unessesary pushes to forked repo
  ## development branches. No sense in a dev building every
  ## time they push for a PR and no one should be working on
  ## common branches in their fork.
  push:
    branches:
      - master
      - develop
      - 'hotfix/**'
      - 'release/**'
      - 'feature/**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      ## We want the name to be 'develop' or 'release_v1.1.0'
      ## or in the case of a tag, 'v1.1.0'        
      - name: Set build_name
        id: build_name
        run: echo ::set-output name=build::$(sed -E 's/refs\/(heads|tags)\///; s/\//_/g;' <<< $GITHUB_REF)
      - name: Set branch_name
        id: branch_name
        run: echo ::set-output name=branch::$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
      - name: Set Commit Hash
        id: github_sha
        run: echo ::set-output name=sha::$(echo "${GITHUB_SHA}")
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}   
        run: echo "$GITHUB_CONTEXT"     
      ## This installs the correct node version
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: 'https://npm.pkg.github.com'
      ## This runs multiple commands to run.
      - name: npm ci, build, and test
        run: |
          npm ci
          CI="" npm run build
          npm test          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
      ## Echo build information to file
      - name: Create Build Information File
        working-directory: ./build
        run: |
          echo "Branch: ${{ steps.branch_name.outputs.branch }}" >> buildinfo.txt
          echo "Commit: ${{ steps.github_sha.outputs.sha }}" >> buildinfo.txt
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.build_name.outputs.build }}
          path: build
      - name: change default
        shell: bash
        run: |
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
      - name: install python modules
        shell: bash
        run: |
          pip install -Iv netstorageapi==1.2.12
      - name: Upload artifact to netstorage
        shell: python
        env:
          NS_HOSTNAME: ${{ secrets.ns_hostname }}
          NS_KEYNAME: ${{ secrets.ns_keyname }}
          NS_KEY: ${{ secrets.ns_key }}
          NS_CPCODE: ${{ secrets.ns_cpcode }}
          REPO_NAME: TODO
          ARTIFACT_FILENAME: ${{ format('{0}.zip', steps.build_name.outputs.build) }}
        run: |
          import os
          from akamai.netstorage import Netstorage, NetstorageError

          NS_HOSTNAME = os.environ.get('NS_HOSTNAME')
          NS_KEYNAME = os.environ.get('NS_KEYNAME')
          NS_KEY = os.environ.get('NS_KEY')
          NS_CPCODE = os.environ.get('NS_CPCODE')
          REPO_NAME = os.environ.get('REPO_NAME')
          ARTIFACT_FILENAME = os.environ.get('ARTIFACT_FILENAME')
          REPO_NAME = os.environ.get('REPO_NAME')
          ARTIFACT_FILENAME = os.environ.get('ARTIFACT_FILENAME')

          local_source = os.path.join(os.getcwd(), ARTIFACT_FILENAME)
          netstorage_destination = '/{0}/{1}/{2}'.format(NS_CPCODE, REPO_NAME, ARTIFACT_FILENAME)

          print(local_source)
          print(netstorage_destination)
          # Rest goes here